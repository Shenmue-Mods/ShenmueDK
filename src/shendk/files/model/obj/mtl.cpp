#include "shendk/files/model/obj/mtl.h"

#include <filesystem>

#include "shendk/utils/string_helper.h"

namespace shendk {
namespace obj {

MTL::MTL() {}
MTL::MTL(const std::string& filepath) { read(filepath); }

void MTL::_read(std::istream& stream) {

}

void MTL::_write(std::ostream& stream) {
    stream << "# MTL Generated by ShenmueDK\n";
    for (auto& texture : textures) {
        if (texture.image.get() == nullptr) continue;
        std::string name = texture.textureID.hexStr();
        std::string materialName = "mat_" + name + "\n";
        materialNames.push_back(materialName);

        stream << "newmtl " << materialName << "\n";

        stream << "Ns 0.000000\n";
        stream << "Ka 1.000000 1.000000 1.000000\n";
        stream << "Kd 0.800000 0.800000 0.800000\n";
        stream << "Ks 0.200000 0.200000 0.200000\n";
        stream << "Ke 0.0 0.0 0.0\n";
        stream << "Ni 1.450000\n";
        stream << "d 1.000000\n";
        stream << "illum 1\n";

        std::string textureName = "tex_" + name + ".png";
        if (filepath.empty()) {
            throw new std::runtime_error("Filepath was not given.");
        }

        std::string texturePath = "";
        std::string dir = fs::path(filepath).parent_path().string();
        if (dir.empty() || dir == "\\") {
            texturePath = textureName;
        } else {
            texturePath = fs::path(filepath).parent_path().append(textureName).string();
            std::string texDir = fs::path(texturePath).parent_path().string();
            if (!texDir.empty()) {
                if (!fs::exists(texDir)) {
                    fs::create_directories(texDir);
                }
            }
        }

        // TODO: needs png writer
        /*Bitmap bmp = texture.Image.CreateBitmap();
        bmp.RotateFlip(RotateFlipType.RotateNoneFlipY);
        using (MemoryStream memory = new MemoryStream())
        {
            using (FileStream fs = new FileStream(texturePath, FileMode.Create, FileAccess.ReadWrite))
            {
                bmp.Save(memory, ImageFormat.Png);
                byte[] bytes = memory.ToArray();
                fs.Write(bytes, 0, bytes.Length);
            }
        }*/
        stream << "map_Kd " << textureName << "\n\n";
    }
}

bool MTL::_isValid(uint32_t signature) {

}

}
}
